<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- FILE         : LESSON-25.htm
     LAST REVISED : 2003-07-07
     AUTHOR       : (C) Copyright 2003 by Peter Chapin
     SUBJECT      : Pointers to pointers and command line processing.  -->
<html lang="en-US" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
  <head>
    <meta name="generator" content="HTML Tidy for Windows (vers 24 July 2007), see www.w3.org" />
    <title>Lesson #25</title>
    <meta name="Author" content="Peter C. Chapin" />
    <!-- <meta name="keywords" lang="en-US" content="..."> -->
    <meta name="ROBOTS" content="NOARCHIVE" />
    <link rel="stylesheet" href="c-course.css" type="text/css" />
  </head>
  <body>
    <h1>Lesson #25</h1>
    <p class="subtitle">Pointers to Pointers and Command Line Processing</p>
    <h2>Overview</h2>
    <p>In this lesson I will cover the following topics</p>
    <ol id="overview-list">
      <li>
        <p>Pointers to pointers.</p>
      </li>
      <li>
        <p>The difference between pre and post incrementing/decrementing pointers and how the
          increment/decrement operators interact with the indirection operator.</p>
      </li>
      <li>
        <p>Processing a program's command line.</p>
      </li>
    </ol>
    <h2>Body</h2>
    <h3>Pointers to pointers</h3>
    <p>We are now about 80% of the way through this course. The techniques and features that we
      will be looking at from now on are more advanced. However, many of them are still very
      important.</p>
    <p>In this lesson we will look at pointers to pointers and at one very important application
      of such beasts: command line processing. Let's start with the basics.</p>
    <p>What is a pointer?</p>
    <p>A pointer is an address of something else. But a pointer is a variable too. Consequently
      a pointer is stored in memory just like any other variable. Thus pointers have addresses
      of their own. The syntax of managing the address of a pointer is exactly as you would
      expect. Here is an example.</p>
    <pre class="code">
int main(void)
{
  int   number = 1;
  int  *p;           // p is a "pointer to int".
  int **pp;          // pp is a "pointer to a pointer to int".

  p  = &amp;number;      // Put the address of Number into p.
  pp = &amp;p;           // Put the address of p into pp.

   *p = 2;           // Assign 2 to the thing pointed at by p.
 **pp = 3;           // Assign 3 to the thing pointed at by
                     //   (the thing pointed by pp).
   ...
</pre>
    <p>Everything in the above example is legal. After declaring my variables I then put the
      address of the integer <span class="code">number</span> into the pointer to integer, <span
        class="code">p</span>. The address of <span class="code">p</span> is the address of a
      pointer to integer. Such an address is thus a pointer to a pointer to int. I am assigning
      it to <span class="code">pp</span> which is of the correct type so there is no problem.
      When I put 2 into <span class="code">*p</span> I am putting the 2 into <span class="code"
        >number</span> since <span class="code">p</span> is currently pointing at <span
        class="code">number</span>. When I put 3 into <span class="code">**pp</span> I am
      putting the three into <span class="code">number</span> as well. This is because <span
        class="code">*pp</span> is <span class="code">p</span> and so <span class="code"
        >*(*pp)</span> is the same as <span class="code">*p</span>.</p>
    <p>If you find this confusing, don't feel bad. Many people do.</p>
    <p>The C language has no limits on how deeply you can do this. The following declaration is
      legal.</p>
    <pre class="code">
int **********p;
</pre>
    <p>Here I'm declaring p to be a "pointer to a pointer to a pointer to a pointer to a pointer
      to a pointer to a pointer to a pointer to a pointer to a pointer to int". If that sounds
      scary, don't worry. I have never seen such a thing in a serious program. Pointers to
      pointers are common enough, and I've even seen pointers to pointers to pointers. But I
      have never encounted anything more than that.</p>
    <h3>Arrays of pointers</h3>
    <p>Actually raw pointers to pointers are not all that common. What is common are arrays of
      pointers. Here is how that would be declared.</p>
    <pre class="code">
char *names[10];
</pre>
    <p>This example declares an array of 10 pointers to character. You will see this sort of
      thing all the time. Why? Because you can use such an array to hold pointers to strings.
      Let me initialize names and you will see what I mean.</p>
    <pre class="code">
char *names[] = {
  "Peter", "Paul", "Mary", NULL
};
</pre>
    <p>Remember that string literals are really pointers. For each literal above, the compiler
      creates an anonymous (null terminated) array of characters and replaces the literal with
      the address of the first character in that array. So I'm initializing an array of pointers
      with a bunch of pointers. That is just fine. I put a NULL pointer at the end of the array
      to mark the end. I can't use the null character for that purpose because this is not an
      array of characters. This is an array of pointers!</p>
    <p>Now suppose I wanted to sweep down this array and print out every name in it. I can do
      that like this</p>
    <pre class="code">
char **p;

for (p = names; *p; p++) {
  printf("%s\n", *p);
}
</pre>
    <p>Looks pretty simple, huh? Here is what's happening. First I'm going to use a pointer to
      keep track of where in the array I'm located. Since this is an array of pointers, I'll
      need a pointer to a pointer. No problem. The name <span class="code">names</span> is the
      name of an array without an index. The compiler treats this as the address of the first
      element in the array. But the array elements are pointers to character so the address of
      an element is a pointer to a pointer to character. I'm assigning it to <span class="code"
        >p</span> which is of the correct type so there is no problem.</p>
    <p>When I ask if <span class="code">*p</span> is true I'm asking if the thing pointed at by
        <span class="code">p</span> is zero or not. But the thing pointed at by <span
        class="code">p</span> is a pointer to character. The null pointer acts like zero so what
      I'm really asking is: does <span class="code">p</span> point at the null pointer? If no
      (non-zero) I execute the loop body. There I print out <span class="code">*p</span> as a
      string. This is fine since the thing pointed at by <span class="code">p</span> is a
      pointer to a null terminated string. When I increment <span class="code">p</span>, I'm
      just advancing it to the next pointer in the array of pointers.</p>
    <p>Here's a picture of my array:</p>
    <pre class="figure">
     +------+
p -&gt; |      |----&gt; P e t e r \0
     +------+
     |      |----&gt; P a u l \0
     +------+
     |      |----&gt; M a r y \0
     +------+
     | NULL |
     +------+
</pre>
    <p>This shows each array element as pointing to its own null terminated array of characters.
      The pointer <span class="code">p</span>, in turn, points at an array element. When I talk
      about <span class="code">*p</span>, I'm talking about what is inside the box <span
        class="code">p</span> is pointing at. When I say <span class="code">p++</span>, I'm
      advancing <span class="code">p</span> to point at the next box.</p>
    <p>Now consider the problem of sorting this list of names. All you would have to do is
      compare the strings pointed at by the various array elements and then, as necessary, swap
      pointers in the array. You don't actually have to move the strings themselves in memory.
      Only their addresses need to be rearranged. This is a good thing. In general strings are
      long and moving them around is slow. But pointers are small and swapping them will always
      be quick even when the things they point at are huge.</p>
    <p>Also notice how each string pointed at by the elements of names can be of different
      length. In my example above, the first pointer in the array points at "Peter" which is
      five characters long. The second pointer in the array points at "Paul" which is only four
      characters long. Array elements are all exactly the same size. But an array of pointers
      can manage things of variable size.</p>
    <p>Some languages support a feature called "multidimensional arrays". In fact, C also has
      that feature. However, it is rarely used. Most C programs use arrays of pointers (and thus
      pointers to pointers) in situations where other languages would use a multidimensional
      array.</p>
    <h3>The command line</h3>
    <p>Probably one of the most common and important application of arrays of pointers is the
      command line. So far all our programs have taken no command line arguments. But many of
      the Unix system commands do accept command line arguments. For example to copy files there
      is the cp program.</p>
    <pre class="terminal">
$ <span class="user-input">cp afile.txt bfile.txt</span>
</pre>
    <p>How does cp know which file we want to copy and what we want to copy it to? We tell it
      those names on the command line as we execute the program, but how does that information
      actually find its way into cp?</p>
    <p>It turns out that function <span class="code">main</span> actually can be written to take
      two parameters. Although our "void" parameter has been fine for our purposes so far, a
      more generally useful way to write main is</p>
    <pre class="code">
int main(int argc, char **argv)
{
  ...
</pre>
    <p>The first parameter to <span class="code">main</span>, traditionally called <span
        class="code">argc</span> for "argument count," is the number of command line arguments
      including the program's own name. The second parameter to main, traditionally called <span
        class="code">argv</span> for "argument vector," is a pointer to the first element of an
      array of pointers that give us access to the arguments themselves. For example when you
      do</p>
    <pre class="terminal">
$ <span class="user-input">cp afile.txt bfile.txt</span>
</pre>
    <p>The cp program (which is written in C) is started with <span class="code">argc ==
        3</span> and argv as shown below.</p>
    <pre class="figure">
        +------+
argv -&gt; |      |----&gt; c p \0
        +------+
        |      |----&gt; a f i l e . t x t \0
        +------+
        |      |----&gt; b f i l e . t x t \0
        +------+
        | NULL |
        +------+
</pre>
    <p>Here's how the cp program might work</p>
    <pre class="code">
#include &lt;stdio.h&gt;

int main(int argc, char *argv)
{
  int   return_code = 0;
  int   ch;
  FILE *infile;
  FILE *outfile;

  if (argc != 3) {
    printf("mycp: Needs two filenames as arguments.\n");
    return_code = 1;
  }
  else if ((infile = fopen(argv[1], "r")) == NULL) {
    printf("mycp: Can't open the file %s for reading.\n", argv[1]);
    return_code = 1;
  }
  else if ((outfile = fopen(argv[2], "w")) == NULL) {
    printf("mycp: Can't open the file %s for writing.\n", argv[2]);
    fclose(infile);
    return_code = 1;
  }
  else {
    while ((ch = getc(infile)) != EOF) putc(ch, outfile);
    fclose(infile);
    fclose(outfile);
  }

  return return_code;
}
</pre>
    <p>If you want to copy and paste this example into an editor to try it, I suggest you use
      the name "mycp.c" to avoid conflicting with the system's cp command.</p>
    <p>Actually the real cp is much more complicated than this. It does a lot more than you
      might think. Nevertheless this example shows the basic way to access the command line from
      a program. Notice how in my example, I'm passing things like <span class="code"
        >argv[1]</span> and <span class="code">argv[2]</span> to the <span class="code"
        >fopen</span> function. The <span class="code">argv</span> parameter is declared as a
      pointer to a pointer to character. Yet C allows me to put an index on any pointer. This
      makes it easy for me to use the <span class="code">argv</span> pointer to access any
      element of the array of pointers that I want. The value of <span class="code"
        >argv[1]</span>, in turn, is an ordinary pointer to character. That is exactly what
        <span class="code">fopen</span> is expecting to get so everything works just fine.</p>
    <h3>But it gets better. Another look at ++ and --</h3>
    <p>Let's step back a bit and talk about the <span class="code">++</span> and <span
        class="code">--</span> operators. Their action seems easy enough to understand. The
        <span class="code">++</span> operator increments something and the <span class="code"
        >--</span> operator decrements it. However, these operators can be used in two different
      ways. For example <span class="code">x = i++</span> or <span class="code">x =
      ++i</span>.</p>
    <p>In the first case the value of <span class="code">i</span> is assigned to <span
        class="code">x</span> and then <span class="code">i</span> is incremented afterwards. In
      the second case <span class="code">i</span> is incremented first and then the new value is
      assigned to <span class="code">x</span>. The first case is called "postincrementing" and
      the second case is called "preincrementing". This only makes a difference when we try to
      use the result of <span class="code">++</span> or <span class="code">--</span> in a larger
      expression. In a case like</p>
    <pre class="code">
i++;
++i;
</pre>
    <p>it really doesn't matter because nothing more is done besides the incrementing.</p>
    <p>When you start doing things with pointers, life gets really interesting. Consider this
      example:</p>
    <pre class="code">
char *name = "Peter";

*name++ = 'x';
</pre>
    <p>Here I'm using both the indirection operator and the postincrement operator. The
      precedence of these operators is the same and they associate from right to left. Thus the
      expression above is really <span class="code">*(name++) = 'x'</span>. This causes the
      value of <span class="code">name</span> to be used with the indirection operator before
      name is incremented. The overall effect is to put the 'x' into the location pointed at by
        <span class="code">name</span> and then increment <span class="code">name</span>. The
      resulting string is "xeter".</p>
    <p>Constrast this with <span class="code">*++name = 'x'</span>. This causes <span
        class="code">name</span> to be incremented first and then used as a pointer. The
      resulting string is "Pxter".</p>
    <p>Both of these examples applied an increment operator to a pointer. You can also increment
      the thing the pointer is pointing at. For example, <span class="code">++*name</span>
      causes the 'P' in "Peter" to become 'Q'. If I use a postincrement I get the same effect
      because just like <span class="code">++i</span> and <span class="code">i++</span> there is
      nothing being done with the result of the incrementation anyway. However, to get a
      postincrement I have to use explicit parentheses as in <span class="code"
      >(*name)++</span>. Without the parentheses the <span class="code">++</span> operator is
      applied directly to <span class="code">name</span> and not <span class="code"
      >*name</span>.</p>
    <h3>Putting this all together</h3>
    <p>Now to see how all of this works together let me show you a more typical way for the
      command line to be processed. In this example, I'm building a program that accepts several
      command line options as well as command line arguments. Let's assume the -h option invokes
      the program's help, the -v option turns on "verbose" mode, and the -i option sets some
      sort of time interval in seconds. The program then operates on all the files otherwise
      named on the command line. For example, I should be able to invoke this program like
      so</p>
    <pre class="terminal">
$ <span class="user-input">prog -v -i10 afile.txt bfile.txt cfile.txt</span>
</pre>
    <p>To turn on verbose mode, set the time interval to 10 seconds and process the three files
      afile.txt, bfile.txt and cfile.txt. Here's how it might be done. Study this example
      carefully... it brings together quite a few of the techniques we have studied in this
      course so far.</p>
    <pre class="code">
int main(int argc, char **argv)
{
  int verbose_mode  = OFF;
  int time_interval = DEFAULT_VALUE;

  // Step down the command line until I come to the end.
  while (*++argv) {

    // If this command line argument is an option...
    if (**argv == '-') {

      // What option is it? Handle each one.
      switch (*++*argv) {
        case 'h':
          display_help();
          break;

        case 'v':
          verbose_mode = ON;
          break;

        case 'i':
          time_interval = atoi(++*argv);
          break;

        default:
          printf("Unknown option (%c) ignored.\n", **argv);
          break;
      }
    }

    // If this command line argument is not an option, it must be a file.
    else {
      process_file(*argv, verbose_mode, time_interval);
    }
  }
  return 0;
}
</pre>
    <p>Before trying to puzzle this example out, you should draw a picture of the argument
      vector. Here it is</p>
    <pre class="figure">
        +------+
argv -&gt; |      |----&gt; p r o g \0
        +------+
        |      |----&gt; - v \0
        +------+
        |      |----&gt; - i 1 0 \0
        +------+
        |      |----&gt; a f i l e . t x t \0
        +------+
        |      |----&gt; b f i l e . t x t \0
        +------+
        |      |----&gt; c f i l e . t x t \0
        +------+
        | NULL |
        +------+
</pre>
    <p>Now let's look at the condition in the outer while loop: <span class="code"
        >*++argv</span>. This involves preincrementing <span class="code">argv</span> and then
      asking: does <span class="code">argv</span> point at the null pointer? The preincrementing
      is necessary to skip over the program's name and get right to the argument list. When
        <span class="code">*++argv</span> refers to the null pointer, the while condition will
      be false and the loop will end. The program is over after it has completely handled the
      command line.</p>
    <p>Because of the <span class="code">++</span> operator being applied to <span class="code"
        >argv</span> in the while condition, the picture looks like below when the while loop is
      entered for the first time.</p>
    <pre class="figure">
        +------+
        |      |----&gt; p r o g \0
        +------+
argv -&gt; |      |----&gt; - v \0
        +------+
        |      |----&gt; - i 1 0 \0
        +------+
        |      |----&gt; a f i l e . t x t \0
        +------+
        |      |----&gt; b f i l e . t x t \0
        +------+
        |      |----&gt; c f i l e . t x t \0
        +------+
        | NULL |
        +------+
</pre>
    <p>There I ask if <span class="code">**argv == '-'</span>. Using two indirection operators
      on <span class="code">argv</span> brings me all the way to the first character in the
      argument. In this case it is a dash so I go inside the if statement. The controlling
      expression on the switch is <span class="code">*++*argv</span>. This says: go to the place
        <span class="code">argv</span> is pointing (that's the pointer in the array). Increment
      what you find there (this causes that pointer to skip over the dash) and check the thing
      the resulting pointer is pointing at (the first character after the dash). There is a case
      in the switch for every legal option.&gt;</p>
    <p>Two of the options merely have to exist. The -i option, however, has an integer
      associated with it. To get at that integer, I use the library <span class="code"
        >atoi</span> function with <span class="code">++*argv</span> as the argument. The <span
        class="code">atoi</span> function (declared in <span class="code"
        >&lt;stdlib.h&gt;</span>) takes a pointer to a null terminated array of characters and
      returns the integer value of those charactes. For example, it will convert "123" into the
      integer 123. The expression <span class="code">++*argv</span> causes the array element
        <span class="code">*argv</span> to be incremented again so that it points just past the
      option name ('i') and at the first digit of the associated number. I then pass that
      pointer to <span class="code">atoi</span> for conversion.</p>
    <p>All of these gyrations with pointers, arrays of pointers, pointers to pointers, and
      incrementation may seem rather obscure. However, this sort of activity is very common in C
      programs. Seasoned C programmers are very used to this and do these things often. If you
      ever do much work with C you will see it again and again.</p>
    <h2>Summary</h2>
    <ol id="summary-list">
      <li>
        <p>Pointers hold the address of something else, but pointers are just variables too. As
          a result, there is no problem taking the address of a pointer and getting a pointer to
          a pointer. More typically programs use arrays of pointers (especially arrays of
          pointers to null terminated strings). A pointer that points into such an array must be
          a pointer to a pointer.</p>
      </li>
      <li>
        <p>An expression such as <span class="code">*name++ = 'x'</span> installs the character
          'x' into the location pointed at by <span class="code">name</span> and then advances
            <span class="code">name</span> by one position. Even though the <span class="code"
            >++</span> operator is applied to <span class="code">name</span> first (due to the
          associativity rules), <span class="code">name</span> is advanced after it is used with
          the indirection operator because this is an instance of postincrementing.</p>
        <p>An expression such as <span class="code">*++name = 'x'</span> preincrements <span
            class="code">name</span> and then installs 'x' into the location pointed at by <span
            class="code">name</span>'s new value. Many C programmers make extensive use of this
          distinction.</p>
      </li>
      <li>
        <p>Function <span class="code">main</span> can be written to take two arguments.</p>
        <pre class="code">
int main(int argc, char **argv) { ...
</pre>
        <p>The first is a count of the number of words on the command line (including the name
          of the program). The second is a pointer to an array of pointers. Each pointer in the
          array points at a null terminated string containing a separate command line argument.
          There is a <span class="code">NULL</span> pointer at the end of the array to mark the
          end. This arrangement allows you to access your program's command line. Users can type
          information on the command line that your program can then use to customize what it
          does. This is a very common and important technique.</p>
      </li>
    </ol>
    <address>&copy; Copyright 2003 by Peter C. Chapin.<br />
Last Revised: <b>July 7, 2003</b></address>
  </body>
</html>
