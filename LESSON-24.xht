<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- FILE         : LESSON-24.htm
     LAST REVISED : 2003-07-04
     AUTHOR       : (C) Copyright 2003 by Peter Chapin
     SUBJECT      : File I/O. -->
<html lang="en-US" xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US">
  <head>
    <meta name="generator" content="HTML Tidy for Windows (vers 24 July 2007), see www.w3.org" />
    <title>Lesson #24</title>
    <meta name="Author" content="Peter C. Chapin" />
    <!-- <meta name="keywords" lang="en-US" content="..."> -->
    <meta name="ROBOTS" content="NOARCHIVE" />
    <link rel="stylesheet" href="c-course.css" type="text/css" />
  </head>
  <body>
    <h1>Lesson #24</h1>
    <p class="subtitle">File I/O</p>
    <h2>Overview</h2>
    <p>In this lesson I will cover the following topics</p>
    <ol id="overview-list">
      <li>
        <p>Opening and closing files explicitly.</p>
      </li>
      <li>
        <p>Using the file handling versions of the standard I/O functions&mdash;especially <span
            class="code">fgets</span>.</p>
      </li>
      <li>
        <p>Various common open modes and the difference between text mode and binary mode.</p>
      </li>
    </ol>
    <h2>Body</h2>
    <h3>Opening, using, and closing files</h3>
    <p>So far our programs have only used the standard input and standard output files. This is
      fine for interacting with a live user. With I/O redirection it is also possible for such
      programs to read a single input file and write a single output file. However, using just
      the standard, pre-opened files is limiting. A program can't both interact with a user and
      manipulate a file because once I/O has been redirected away from the terminal the user is
      taken out of the picture. Also many programs need to manipulate multiple files at once.
      I/O redirection can't (easily) be used to do this.</p>
    <p>The C standard library comes with a complete set of file handling functions that allow
      you to manipulate files. Since these functions are standard they will work the same way on
      any system that supports C. This is a nice feature since the way files are stored and
      accessed by the system itself tends to vary quite a bit from one system to another.</p>
    <p>Before you can use a file, you must "open" it. When you are finished using a file you
      should "close" it. The steps of opening, using, and closing occur in many areas of
      programming. If you are not familiar with this approach, you should pay close attention.
      You will see it not only when you program with files, but also with many other types of
      resources.</p>
    <p>All of C's standard file handling functions are declared in <span class="code"
        >&lt;stdio.h&gt;</span> Thus you will need to include that header in any source file
      that needs to use them. Then, before you can do anything with a file, you need to declare
      a variable of type <span class="code">FILE *</span>. Such a variable is called a "pointer
      to FILE". The name "FILE" is defined in <span class="code">&lt;stdio.h&gt;</span> in some
      suitable way. You don't need (or want) to know what it really is.</p>
    <p>Next, to open the file you must use the <span class="code">fopen</span> function. Here is
      how that looks.</p>
    <pre class="code">
#include &lt;stdio.h&gt;

int main(void)
{
  FILE *input;

  input = fopen("afile.txt", "r");

  ...
</pre>
    <p>Note the following things:</p>
    <ol>
      <li>
        <p>I have to create a variable of type pointer to <span class="code">FILE</span>, not
          just <span class="code">FILE</span>. Students often leave off the asterick in that
          declaration.</p>
      </li>
      <li>
        <p>The <span class="code">fopen</span> function takes two parameters. The first is the
          name of the file. The format of the name depends on the operating system. Any name
          that makes sense to the operating system will work. Note that if you are opening a
          file under Windows and if the name includes backslashes, you will need to escape the
          backslashes just as you would in any string. For example:</p>
        <pre class="code">
input = fopen("c:\\Program Files\\MyApplication\\config.txt", "r");
</pre>
      </li>
      <li>
        <p>The second parameter of <span class="code">fopen</span> is the open "mode". It needs
          to be a string&mdash;not just a character. (Use double quotes, not single quotes). In
          my example above my mode string just happens to be a string of one character. The "r"
          means I wish to open the file for reading (input). I could use a "w" if I wanted to
          open the file for writing (output).</p>
      </li>
      <li>
        <p>The <span class="code">fopen</span> function returns the <span class="code"
            >NULL</span> pointer if it fails to open the file for some reason. The most common
          reason for <span class="code">fopen</span> to fail when you open a file for reading is
          that the file does not exist. There are, however, other reasons for failure so don't
          assume that is what went wrong for certain.</p>
      </li>
    </ol>
    <p>It is very bad to attempt to use a file that didn't open correctly. Although it won't
      cause any file corruption, but it will cause your program to dump core. Because of this,
      you should always check the result of your <span class="code">fopen</span> calls. More
      typically my example would be written like this</p>
    <pre class="code">
#include &lt;stdio.h&gt;

int main(void)
{
  FILE *input;

  if ((input = fopen("afile.txt", "r")) == NULL) {
    printf("Error: Can't open afile.txt for reading!\n");
  }
  else {
    // I opened the file fine. Do something with it.
  }
  return 0;
}
</pre>
    <p>It is important that you don't forget to close your files after you are finished using
      them. However, you shouldn't attempt to close a file that didn't open correctly (again...
      core dump). So before even writing the code that works with the file, I suggest that you
      add a call to <span class="code">fclose</span> at the appropriate spot. My example
      becomes</p>
    <pre class="code">
#include &lt;stdio.h&gt;

int main(void)
{
  FILE *input;

  if ((input = fopen("afile.txt", "r")) == NULL) {
    printf("Error: Can't open afile.txt for reading!\n");
  }
  else {
    // I opened the file fine. Do something with it.

    fclose(input);
  }
  return 0;
}
</pre>
    <p>Actually ANSI standard C guarentees that all files opened with <span class="code"
        >fopen</span> will be automatically closed when main returns and the program ends. As a
      result if it is your intention to hold a file open during the entire time your program
      executes, you don't really need to worry about closing it. However, I strongly suggest
      that you do explicitly close all your files anyway. Code has a tendency to get copied from
      one program to another. While closing files might be optional in your first program it
      might not be optional in your next one. There are times when you really must remember to
      close your files. For example, a program that runs for a long time (like a server) and
      manipulates many files during its lifetime, must be sure to close them in a timely manner
      or the system will run out of resources. If you get in the habit of always closing your
      files you will have fewer problems when you try to write such a program.</p>
    <p>Finally there are many other resources that follow the open/use/close approach. If you
      get used to worrying about closing files you will be better prepared to manage these other
      resources when you want to use them. For example, programs that work with the network have
      to first open a network connection, use the connection, and then close the connection. If
      a program fails to close the network connections that it opens, it can cause odd problems.
      The ANSI C standard does nothing to insure that such a resource is properly cleaned
      up.</p>
    <h3>So how do I use files?</h3>
    <p>Once you have opened a file successful you can then read material from the file if it's
      an input file or write material to the file if it's an output file. It is easy to do
      this.</p>
    <p>The standard C library contains functions for doing I/O at three different levels. You
      can do raw character-at-a-time I/O, you can do I/O of entire lines of text, and you can do
      "formatted" I/O to read or write the values of variables. When you are using the standard
      input and standard output files these functions are as follows</p>
    <table border="1">
      <tr>
        <th></th>
        <th>Output</th>
        <th>Input</th>
      </tr>
      <tr>
        <th>Character</th>
        <td>
          <span class="code">putchar</span>
        </td>
        <td>
          <span class="code">getchar</span>
        </td>
      </tr>
      <tr>
        <th>Line</th>
        <td>
          <span class="code">puts</span>
        </td>
        <td>
          <span class="code">gets</span>
        </td>
      </tr>
      <tr>
        <th>Formatted</th>
        <td>
          <span class="code">printf</span>
        </td>
        <td>
          <span class="code">scanf</span>
        </td>
      </tr>
    </table>
    <p>You have already looked at these functions. Here are a few points to remember about
      them.</p>
    <ol>
      <li>
        <p>The <span class="code">puts</span> and <span class="code">gets</span> functions are
          designed to work together. The <span class="code">gets</span> function does not put
          the terminating '\n' character into the array it has been given. The <span
            class="code">puts</span> function adds a '\n' character on the output.</p>
      </li>
      <li>
        <p>The <span class="code">gets</span> function just takes a single pointer to character
          parameter. It has no way of knowing how much space is in the array it has been given.
          For this reason gets should not be used in a serious program.</p>
      </li>
    </ol>
    <p>There are six other functions that are very similar to the ones above that you can use
      with file I/O. All of these functions need a <span class="code">FILE *</span> parameter to
      specify which file you are trying to use.</p>
    <table border="1">
      <tr>
        <th></th>
        <th>Output</th>
        <th>Input</th>
      </tr>
      <tr>
        <th>Character</th>
        <td>
          <span class="code">putc</span>
        </td>
        <td>
          <span class="code">getc</span>
        </td>
      </tr>
      <tr>
        <th>Line</th>
        <td>
          <span class="code">fputs</span>
        </td>
        <td>
          <span class="code">fgets</span>
        </td>
      </tr>
      <tr>
        <th>Formatted</th>
        <td>
          <span class="code">fprintf</span>
        </td>
        <td>
          <span class="code">fscanf</span>
        </td>
      </tr>
    </table>
    <p>Here are more details on these functions.</p>
    <pre class="code">
int putc(int ch, FILE *stream);
  /* This function writes the character ch to the output file stream. It
     returns ch or EOF if it encounters an error. */

int getc(FILE *stream);
  /* This function reads a character from the input file stream. It
     returns what it reads or EOF if it encounters the end of the file
     (or an error). */

int fputs(char *line, FILE *stream);
  /* This function writes the characters in the array pointed at by line
     to the output file stream. It does NOT add a '\n' character auto-
     mattically. It returns EOF if it encounters an error. */

char *fgets(char *buffer, int size, FILE *stream);
  /* This function reads characters from the input file stream. It will
     place these characters into the array pointed at by buffer until
     one of three things happen. 1) The function encounters (and stores)
     a '\n' character. 2) The function stores size-1 characters. 3) The
     function encounters the end of the input file or an error
     condition. If the function stores anything in the array it adds a
     null terminator to the array and then returns buffer. Otherwise it
     returns the NULL pointer. */

int fprintf(FILE *stream, char *Format, ...);
  /* This function works just like printf except that it sends its
     output to the output file specified by stream. */

int fscanf(FILE *stream, char *Format, ...);
  /* This function works just like scanf except that it reads its input
     from the input file specified by stream. */
</pre>
    <p>Function <span class="code">fgets</span> certainly sounds complicated. However, this is
      because it is actually doing more than <span class="code">gets</span> does. In addition to
      reading from an explicitly opened file, <span class="code">fgets</span> also insures that
      the destination buffer does not overflow. You must provide <span class="code">fgets</span>
      with a total size for that buffer. It will store at most <span class="code">size-1</span>
      characters into it, leaving one byte for the null character (which it also adds). Notice
      also that <span class="code">fgets</span> does not just drop the '\n' character the way
        <span class="code">gets</span> does. This goes along with how <span class="code"
        >fputs</span> works. The <span class="code">fputs</span> function does not add a '\n'
      automatically. Thus lines read with <span class="code">fgets</span> can be written with
        <span class="code">fputs</span> directly.</p>
    <p>Keep in mind that <span class="code">fgets</span> normally reads just one line of input.
      Like <span class="code">gets</span>, it will stop reading when it encounters a '\n.' The
      issue with the size parameter is just so that you can insure <span class="code"
        >fgets</span> will not read too much. Because <span class="code">fgets</span> has this
      safety feature, it should be preferred over <span class="code">gets</span>.</p>
    <p>What happens if you give <span class="code">fgets</span> a very long line to read? It
      will read the first <span class="code">size-1</span> characters of the line and then
      return. The next time it is called, it will pick up where it left off, reading another
        <span class="code">size-1</span> characters of the very long line. Finally when it
      encounters a '\n' it will just return that last portion of the line. The next call after
      that will cause <span class="code">fgets</span> to attempt to read the next line.</p>
    <p>If <span class="code">fgets</span> encounters the end of the file in the middle of a line
      (that is, if the last line of the file does not have a '\n' at the end), it will return
      normally at that point. It will only return <span class="code">NULL</span> if it
      encounters the end of the file without reading any other characters.</p>
    <p>All in all, <span class="code">fgets</span> is a very robust function. You should get in
      the habit of using it. Let me add it to my example:</p>
    <pre class="code">
#include &lt;stdio.h&gt;

int main(void)
{
  FILE *input;
  char  line_buffer[256];

  if ((input = fopen("afile.txt", "r")) == NULL) {
    printf("Error: Can't open afile.txt for reading!\n");
  }
  else {

    // Read the input file a line at a time and print it onto stdout.
    while (fgets(line_buffer, 256, input) != NULL) {
      printf("%s", line_buffer);
    }

    fclose(input);
  }
  return 0;
}
</pre>
    <p>Here I set aside an array of 256 characters to serve as the line buffer. This allows 254
      characters for "normal" text on each line. Why 254? The <span class="code">fgets</span>
      function will need one character for the null character and one to hold the '\n'
      character. By setting aside an array of 256 characters, I'm saying that I don't expect
      there to be any lines longer than 254 characters in the file. However, if there is, <span
        class="code">fgets</span> will just read the line in multiple pieces. As long as my
      program knows how to deal with that it will still work fine. It also works fine if the
      last line is without a '\n' character. In that case fgets will still return the last line
      fine and won't return NULL until it has tried to read a "naked" end of file.</p>
    <p>Notice how when I used <span class="code">printf</span> to output the lines I did
        <em>not</em> include a '\n' in the format string. That's because there should still be
      '\n' characters in the line buffer. The <span class="code">fgets</span> function does not
      remove them. If <span class="code">fgets</span> reads a hugely long line in multiple
      pieces, <span class="code">printf</span> will just print out the pieces as desired.</p>
    <h3>What about filter programs?</h3>
    <p>We've written several programs that act as filters. Those programs have processed their
      standard input and written to their standard ouput. We have used I/O redirection to make
      it possible for such a program to manipulate files. If you want to do the file handling
      explicitly in your program you can do so. Here is an example that shows how to open both
      an input file and an output file.</p>
    <pre class="code">
#include &lt;stdio.h&gt;

int main(void)
{
  FILE *input;
  FILE *output;
  int   ch;

  // Try to open the input file. If it fails, print a message.
  if ((input = fopen("afile.txt", "r")) == NULL) {
    printf("Can't open afile.txt for reading!\n");
  }

  // Now try to open the output file. If it fails, close the input.
  else if ((output = fopen("bfile.txt", "w")) == NULL) {
    printf("Can't open bfile.txt for writing!\n");
    fclose(input);
  }

  // If the files opened okay, loop over the input one character at a time.
  else {
    while ((ch = getc(input)) != EOF) {

      // Process ch and output it.
      putc(ch, output);
    }

    // Close the files.
    fclose(input);
    fclose(output);
  }

  return 0;
}
</pre>
    <p>This program is basically an <span class="code">if...else if...</span> chain. I first try
      to open the two files. If that works, the final else clause executes where I use the same
      loop we've talked about before. Notice how I close the files when I am done processing
      them. Notice also how I close the input file if the output file fails to open. It is easy
      to forget that. This program shows character-at-a-time I/O. If your needs require that you
      read the input a line at a time, you can just replace the while loop with one that uses
        <span class="code">fgets</span>.</p>
    <h3>More about open modes</h3>
    <p>So far you've seen me using the "r" and the "w" modes. Are there others? Here is a list
      of modes that you might want to use.</p>
    <table>
      <tr>
        <td valign="top">"r"</td>
        <td valign="top">:</td>
        <td>This opens a file for reading in text mode. The file must exist.</td>
      </tr>
      <tr>
        <td valign="top">"rb"</td>
        <td valign="top">:</td>
        <td>This opens a file for reading in binary mode. The file must exist.</td>
      </tr>
      <tr>
        <td valign="top">"w"</td>
        <td valign="top">:</td>
        <td>This opens a file for writing in text mode. If the file exists, its old contents are
          lost. If the file does not exist, it is created.</td>
      </tr>
      <tr>
        <td valign="top">"wb"</td>
        <td valign="top">:</td>
        <td>This opens a file for writing in binary mode. If the file exists, its old contents
          are lost. If the file does not exist, it is created.</td>
      </tr>
      <tr>
        <td valign="top">"a"</td>
        <td valign="top">:</td>
        <td>This opens a file for appending in text mode. If the file exists, all output is
          added on to the end of the file. If the file does not exist, it is created and this
          mode is just like "w".</td>
      </tr>
      <tr>
        <td valign="top">"ab"</td>
        <td valign="top">:</td>
        <td>This opens a file for appending in binary mode. If the file exists, all output is
          added on to the end of the file. If the file does not exist, it is created and this
          mode is just like "wb".</td>
      </tr>
    </table>
    <p>All of these modes are for "sequential" access of the file. Such access involves reading
      or writing the file only from the beginning to the end. There are other modes (and
      functions) that allow you to jump around in a file and access its contents in any order
      you please. We will not discuss those techniques in this course.</p>
    <p>What is the difference between "text mode" and "binary mode?" Actually under Unix there
      is no difference at all. The Unix operating system regards all files exactly the same way:
      as collections of raw bytes. Text files are not special in the eyes of the system. Unix is
      somewhat unusual in this regard.</p>
    <p>Other operating systems sometimes store text files in special ways. Consequently you need
      to specify when you open a file how you intend to handle that file so the operating system
      can do whatever is necessary to make that work. Under Unix "r" and "rb" are identical.
      However, you should always specify the appropriate mode so that your program is easier to
      get working in another environment.</p>
    <p>Under Windows the biggest issue is CR/LF translations. Text files in Windows have two
      characters to mark the ends of lines: a carriage return and a line feed. Since C programs
      expect there to be a single "newline" character at the end of each line somebody has to
      translate CR/LF pairs into '\n' as the (text) file is being read and '\n' characters to
      CR/LF pairs as the (text) file is being written. This is handled by the C library, but you
      must help by opening the file in the proper mode.</p>
    <h2>Summary</h2>
    <ol id="summary-list">
      <li>
        <p>Before you can use a file, you must open it with <span class="code">fopen</span>.
          When you are doing using a file, you should close it with <span class="code"
            >fclose</span>. The <span class="code">fopen</span> function returns a pointer to
            <span class="code">FILE</span> which you then use in all the subsequent file
          handling functions. You do not need the name of the file after you've opened it. The
            <span class="code">fopen</span> function returns <span class="code">NULL</span> if
          the file can't be opened.</p>
      </li>
      <li>
        <p>The file I/O functions come in three levels: character at a time, line at a time, and
          formatted. You should use the level that best suits your application. The <span
            class="code">fgets</span> function, which reads a line at a time from a file, is
          much more robust than the <span class="code">gets</span> function that reads a line
          from the standard input. The <span class="code">fgets</span> function will not
          overflow the buffer it has been given.</p>
      </li>
      <li>
        <p>You can open a file for reading, writing, or appending. When you open a file for
          reading, it must exist. When you open a file for writing it is erased if it exists or
          created if it does not exist. When you open a file for appending the new output is
          added to the end of the file.</p>
        <p>Some systems distinguish between binary files and text files. The main issue is that
          under some systems (such as Windows), there are '\n' to CR/LF translations that must
          be done for text files. Unix does not need these translations so under Unix there is
          no issue of text vs binary files.</p>
      </li>
    </ol>
    <address>&copy; Copyright 2003 by Peter C. Chapin.<br />
Last Revised: <b>July 4, 2003</b></address>
  </body>
</html>
